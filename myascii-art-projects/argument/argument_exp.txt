package argument

import (
	"Adlet/main_function/error_handling"
)

/*
The must  have not been banner format is:

	string string string
	banner (string, banner)
	option string string
	option banner string
	option (in some cases)
	string string
	banner string
*/
func option_retrieve(option string) string {
	var object string = ""
	for i := len(option) - 1; i >= 0; i-- {
		if option[i] != '=' {
			object = string(option[i]) + object
		} else {
			break
		}
	}
	return object
}

func option_identification(option string) (bool, string) {
	if len(option) < 2 {
		return false, ""
	}
	if !(option[0] == '-' && option[1] == '-') {
		return false, ""
	}

	file_name := option_retrieve(option)
	option = option[:len(option)-len(file_name)]

	var object string = ""
	for i := 2; i < len(option); i++ {
		if option[i] != '=' {
			object += string(option[i])
		} else {
			break
		}
	}
	if !(object == "reverse" || object == "align" || object == "output" || object == "color") {
		return false, ""
	}

	return true, object
}

func banner_identification(banner string) bool {
	if banner == "standard" || banner == "shadow" || banner == "thinkertoy" {
		return true
	}
	return false
}

func ArgumentHandling(arguments []string) (bool, string, string, string) {
	var option_existence, banner_existence, string_existence bool = false, false, false
	var flag_option, flag_banner bool = false, false
	var option string = ""
	var banner_count int = 0
	var mega_option string
	if len(arguments) > 3 && error_handling.ErrorHandling("ArgumentHandling", nil, true, "There are too many arguments than it is supposed to be") {
		return true, "", "", ""
	}
	for i := 0; i < len(arguments); i++ {

		flag_option, option = option_identification(arguments[i])

		if flag_option {
			if i > 0 && error_handling.ErrorHandling("ArgumentHandling", nil, true, "There is a problem with option's format") {
				return true, "", "", ""
			}
			option_existence = true
			if len(option) > 0 {
				mega_option = option
			}
		}

		flag_banner = banner_identification(arguments[i])
		if flag_banner {
			banner_count++
			if banner_count == 3 && error_handling.ErrorHandling("ArgumentsHandling", nil, true, "There are too many banners") {
				return true, "", "", ""
			}
			banner_existence = true
		}

		if !flag_banner && !flag_option {
			if banner_existence && error_handling.ErrorHandling("ArgumentHandling", nil, true, "The banner can not be at the front of the string") {
				return true, "", "", ""
			}
			if mega_option != "color" && string_existence && error_handling.ErrorHandling("ArgumentHandling", nil, true, "There are too many strings to work out") {
				return true, "", "", ""
			}

			string_existence = true

		}

		if (banner_existence || string_existence) && mega_option == "reverse" {
			error_handling.ErrorHandling("ArgumentHandling", nil, true, "The format of reverse option is not followed correctly")
			return true, "", "", ""
		}

		flag_option = false
		flag_banner = false

	}
	if mega_option == "align" && !string_existence && error_handling.ErrorHandling("ArgumentHandling", nil, true, "The align option needs a string to manipulate with it") {
		return true, "", "", ""
	}
	if option_existence {
		if len(arguments) == 3 {
			return false, mega_option, arguments[1], arguments[2]
		} else if len(arguments) == 2 {
			return false, mega_option, arguments[1], "standard"
		} else {
			return false, mega_option, "", ""
		}
	} else {
		if len(arguments) == 2 {
			return false, "", arguments[0], arguments[1]
		} else if len(arguments) == 1 {
			return false, "", arguments[0], "standard"
		}
	}
	return true, "", "", ""
}
